apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.gfx.ribbonizer'
apply plugin: 'com.google.gms.oss.licenses.plugin'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'
apply plugin: "androidx.navigation.safeargs"

ext {
    ciBuild = System.getenv("CI") == "true"
    travisBuild = System.getenv("TRAVIS") == "true"
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "jp.gcreate.product.filteredhatebu"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    // flavorDimensionsはproductFlavorsをどの次元で切り分けているかを定義するもの
    // 同じdimensionなら並列に並ぶ（ここでは使うnetworkでflavorを分けているので名前をnetworkとしている）
    // productFlavorsを定義する場合、少なくとも1つflavorDimensionsを定義する必要がある
    flavorDimensions "network"
    productFlavors {
        mock {
            applicationIdSuffix ".mock"
            // flavorDimensionsが1つしかないなら省略しても結果は同じ
            dimension "network"
        }
        prod {
            // mockとprodが同じdimensionならmockDebug/prodDebugとなるが
            // これを仮に別のdimensionにしたらmockProdDebugとかになる
            dimension "network"
        }
    }
    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Travisでだけリリースビルドを行う
            if (travisBuild) {
                storeFile rootProject.file('release.keystore')
                storePassword System.getenv('filtered_hatebu_pass')
                keyAlias System.getenv('filtered_hatebu_alias')
                keyPassword System.getenv('filtered_hatebu_key_pass')
            }
            // ローカルビルド
            if (!ciBuild) {
                storeFile rootProject.file('release.keystore')
                storePassword getProperty('filtered_hatebu_pass')
                keyAlias getProperty('filtered_hatebu_alias')
                keyPassword getProperty('filtered_hatebu_key_pass')
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            ext.enableCrashlytics = true
        }
    }
    dataBinding {
        enabled = true
    }
    dexOptions {
        preDexLibraries = !ciBuild
    }
    sourceSets {
        mock {
            // androidTest用のmock用ファイルをJunit Testでも利用するための設定
            // getClass().getClassLoader().getResources()でアクセスできるようにする
            test.resources.srcDirs += "src/mock/assets"
        }
    }
}

ribbonizer {
    builder { variant, iconFile ->
        if (variant.flavorName == "mock") {
            return yellowRibbonFilter(variant, iconFile)
        } else {
            return greenRibbonFilter(variant, iconFile)
        }
    }

    forcedVariantsNames "mockRelease"
}

play {
    track = 'production'
    if (!ciBuild) {
        jsonFile = rootProject.file("filteredhatebu_play_api.json")
    }
}

kotlin.experimental.coroutines "ENABLE"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    def coroutine_version = "0.23.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

    def support_ver = "27.1.1"
    implementation "com.android.support:appcompat-v7:$support_ver"
    implementation "com.android.support:design:$support_ver"
    implementation "com.android.support:recyclerview-v7:$support_ver"
    implementation "com.android.support:cardview-v7:$support_ver"
    implementation "com.android.support:customtabs:$support_ver"

    implementation 'com.android.support.constraint:constraint-layout:1.1.2'

    implementation 'androidx.core:core-ktx:0.3'

    def lifecycle_version = "1.1.1"
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"
    def nav_version = "1.0.0-alpha04"
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"
    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"
    implementation "android.arch.persistence.room:rxjava2:$room_version"
    def work_version = "1.0.0-alpha05"
    implementation "android.arch.work:work-runtime-ktx:$work_version"
    def paging_version = "1.0.0"
    implementation "android.arch.paging:runtime:$paging_version"

    def play_services_version = "10.0.1"
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.4'
    implementation 'com.google.android.gms:play-services-oss-licenses:15.0.1'

    def dagger_version = "2.16"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation 'com.jakewharton.timber:timber:4.3.1'
    implementation 'io.reactivex:rxjava:1.2.2'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation "io.reactivex.rxjava2:rxjava:2.1.16"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'

    // json
    def moshi_version = "1.6.0"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // network
    def okhttp_ver = "3.4.1"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_ver"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_ver"

    debugImplementation 'com.facebook.stetho:stetho:1.4.1'

    def leak_ver = '1.5'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_ver"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_ver"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_ver"
    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_ver"

    def retrofit_ver = "2.1.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_ver"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_ver"
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofit_ver"
    implementation("com.squareup.retrofit2:converter-simplexml:$retrofit_ver") {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }

    def junit4 = 'junit:junit:4.12'
    def espresso_ver = '2.2.2'
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso_ver", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espresso_ver", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestImplementation "io.mockk:mockk-android:1.8.4"
    androidTestImplementation "org.assertj:assertj-core:2.9.1"
    androidTestImplementation junit4
    androidTestImplementation "android.arch.core:core-testing:$lifecycle_version"
    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:$nav_version"
    androidTestImplementation "android.arch.work:work-testing:$work_version"

    testImplementation junit4
    testImplementation "org.robolectric:robolectric:3.1.2"
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.threeten:threetenbp:1.3.6'
    testImplementation "io.mockk:mockk:1.8.4"
    testImplementation "org.assertj:assertj-core:2.9.1"
    testImplementation "android.arch.persistence.room:testing:$room_version"
    testImplementation "android.arch.paging:common:$paging_version"
}

/*
 * On Travis-CI androidTest failed as java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
 * at android.databinding.DataBindingUtil.<clinit>(DataBindingUtil.java:31)
 *
 * This is workaround for it.
 *
 * Workaround for https://code.google.com/p/android/issues/detail?id=182715
 *
 * The Android Gradle plugin is creating DataBindingExportBuildInfoTasks for the instrumentation
 * APK that generates from the app APKs layouts. This creates duplicate classes in the app and
 * instrumentation APK which leads to
 *      java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
 * on older devices.
 *
 * The workaround is to get the DataBindingExportBuildInfoTasks tasks for the instrumentation APK
 * and delete the files right after it creates them.
 */
tasks.withType(com.android.build.gradle.internal.tasks.databinding.DataBindingExportBuildInfoTask) { task ->
    if (task.name.endsWith("AndroidTest")) {
        task.finalizedBy(tasks.create("${task.name}Workaround") << {
            task.output.deleteDir()
        })
    }
}

if (!ciBuild || travisBuild) {
    apply plugin: 'com.google.gms.google-services'
}
