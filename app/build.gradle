plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
}

ext {
    ciBuild = System.getenv("CI") == "true"
    travisBuild = System.getenv("TRAVIS") == "true"
}

//if (!ciBuild || travisBuild) {
//    apply plugin: 'com.google.gms.google-services'
//}

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId "jp.gcreate.product.filteredhatebu"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    // flavorDimensionsはproductFlavorsをどの次元で切り分けているかを定義するもの
    // 同じdimensionなら並列に並ぶ（ここでは使うnetworkでflavorを分けているので名前をnetworkとしている）
    // productFlavorsを定義する場合、少なくとも1つflavorDimensionsを定義する必要がある
    flavorDimensions "network"
    productFlavors {
        mock {
            applicationIdSuffix ".mock"
            // flavorDimensionsが1つしかないなら省略しても結果は同じ
            dimension "network"
        }
        prod {
            // mockとprodが同じdimensionならmockDebug/prodDebugとなるが
            // これを仮に別のdimensionにしたらmockProdDebugとかになる
            dimension "network"
        }
    }
    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            // Travisでだけリリースビルドを行う
            if (travisBuild) {
                storeFile rootProject.file('release.keystore')
                storePassword System.getenv('filtered_hatebu_pass')
                keyAlias System.getenv('filtered_hatebu_alias')
                keyPassword System.getenv('filtered_hatebu_key_pass')
            }
            // ローカルビルド
            if (!ciBuild) {
                storeFile rootProject.file('release.keystore')
                storePassword getProperty('filtered_hatebu_pass')
                keyAlias getProperty('filtered_hatebu_alias')
                keyPassword getProperty('filtered_hatebu_key_pass')
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            // https://github.com/amitshekhariitbhu/Android-Debug-Database
            // adb forward tcp:8081 tcp:8081
            // and access to localhost:8081 with browser
            resValue("string", "PORT_NUMBER", "8081")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    dataBinding {
        enabled = true
    }
    sourceSets {
        mock {
            // androidTest用のmock用ファイルをJunit Testでも利用するための設定
            // getClass().getClassLoader().getResources()でアクセスできるようにする
            test.resources.srcDirs += "src/mock/assets"
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            animationsDisabled = true
        }
    }
    packagingOptions {
        resources {
            pickFirsts += ['META-INF/atomicfu.kotlin_module']
        }
    }
    namespace 'jp.gcreate.product.filteredhatebu'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.browser:browser:1.0.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta1'

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "androidx.activity:activity-ktx:1.6.1"
    implementation "androidx.fragment:fragment-ktx:1.5.4"

    def lifecycle_version = "2.0.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    def nav_version = "2.1.0-alpha04"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    def room_version = "2.4.3"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    def work_version = "2.0.1"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    def paging_version = "2.1.0"
    implementation "androidx.paging:paging-runtime:$paging_version"

    implementation platform('com.google.firebase:firebase-bom:31.0.1')
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    def koin_version = "3.3.0"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-workmanager:$koin_version"
    implementation "io.insert-koin:koin-androidx-navigation:$koin_version"
    def koin_compose_version = "3.3.0"
    implementation "io.insert-koin:koin-androidx-compose:$koin_compose_version"

    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'io.reactivex:rxjava:1.2.2'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation "io.reactivex.rxjava2:rxjava:2.1.16"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.0'

    // json
    def moshi_version = "1.14.0"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // network
    def okhttp_ver = "3.4.1"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_ver"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_ver"

    def retrofit_ver = "2.1.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_ver"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_ver"
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofit_ver"
    implementation("com.squareup.retrofit2:converter-simplexml:$retrofit_ver") {
        exclude module: 'stax'
        exclude module: 'stax-api'
        exclude module: 'xpp3'
    }

    def junit4 = 'junit:junit:4.12'
    def mockk_version = "1.8.9"
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation "org.assertj:assertj-core:2.9.1"
    androidTestImplementation junit4
    androidTestImplementation "androidx.arch.core:core-testing:$lifecycle_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"

    testImplementation junit4
    testImplementation "org.robolectric:robolectric:3.2.2"
    testImplementation 'org.threeten:threetenbp:1.3.8'
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "org.assertj:assertj-core:2.9.1"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "androidx.paging:paging-common-ktx:$paging_version"
}

task openReportJvmTest(type: Exec) {
    workingDir "build/reports/tests/testProdDebugUnitTest"
    commandLine 'open'
    args "index.html"
}

task openReportInstrumentedTest(type: Exec) {
    workingDir "build/reports/androidTests/connected/flavors/MOCK"
    commandLine 'open'
    args "index.html"
}
openReportJvmTest.onlyIf { !ciBuild && !travisBuild }
openReportInstrumentedTest.onlyIf { !ciBuild && !travisBuild }

tasks.withType(AbstractTestTask) { task ->
    if (task.name == "testProdDebugUnitTest") {
        task.finalizedBy openReportJvmTest
    }
}

tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->
    if (task.name == "connectedMockDebugAndroidTest") {
        task.finalizedBy openReportInstrumentedTest
    }
}
